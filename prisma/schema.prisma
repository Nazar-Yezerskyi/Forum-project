// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  rolesId Int
  role Roles relation(fields: [rolesId], references: [id])
  posts   Posts[]
  comments Comments[]
  post_likes Post_likes[]
  comment_likes Comment_likes[]
  putLike Likes[] @relation("putLikeId")
  getLike  Likes[] @relation("getLikeId")
}

model Roles {
  id        Int  @id @default(autoincrement())
  roleName  String @unique
  users Users[]
}

model Posts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String   @db.VarChar(255)
  description String
  authorId    Int
  image       String?
  updated     DateTime?    @db.Timestamp(6)
  archived    Boolean      @default(false)
  comments    Comments[]
  post_likes  Post_likes[]
  author      Users        @relation(fields: [authorId], references: [id])
}

model Comments {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  content String
  userId Int
  postId Int
  user   Users @relation(fields: [userId], references: [id])
  post   Posts @relation(fields: [postId], references: [id])
  comment_likes Comment_likes[]
}

model Post_likes {
  id Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   Users @relation(fields: [userId], references: [id])
  post   Posts @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Comment_likes {
  id Int  @id @default(autoincrement())
  userId Int
  commentsId Int
  user   Users @relation(fields: [userId], references: [id])
  comments  Comments @relation(fields: [commentsId], references: [id])
  createdAt DateTime @default(now())
}
model Likes {
  putLike Users @relation("putLikeId", fields: [putLikeId], references: [id])
  putLikeId Int
  getLike Users @relation("getLikeId", fields: [getLikeId], references: [id])
  getLikeId Int

  @@id([putLikeId, getLikeId])
}