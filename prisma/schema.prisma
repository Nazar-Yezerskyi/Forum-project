// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int             @id @default(autoincrement())
  firstName         String
  lastName          String
  password          String
  email             String          @unique
  createdAt         DateTime        @default(now())
  accountImg        String?
  lastLogIn         DateTime?       @db.Timestamp(6)
  isVerified        Boolean         @default(false)
  verificationToken String?
  roleId            Int
  comment_likes     Comment_likes[]
  comments          Comments[]
  post_likes        Post_likes[]
  posts             Posts[]
  Roles             Roles           @relation(fields: [roleId], references: [id])
  followedBy Follows[] @relation("followedBy")
  following  Follows[] @relation("following")
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique(map: "Roles_roleName_key")
  users Users[]
}

model Posts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String   @db.VarChar(255)
  description String
  author   Users @relation(fields: [authorId], references: [id])
  authorId Int
  comments Comments[]
  post_likes Post_likes[]
}

model Comments {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  content String
  userId Int
  postId Int
  user   Users @relation(fields: [userId], references: [id])
  post   Posts @relation(fields: [postId], references: [id])
  comment_likes Comment_likes[]
}

model Post_likes {
  id Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   Users @relation(fields: [userId], references: [id])
  post   Posts @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Comment_likes {
  id Int  @id @default(autoincrement())
  userId Int
  commentsId Int
  user   Users @relation(fields: [userId], references: [id])
  comments  Comments @relation(fields: [commentsId], references: [id])
  createdAt DateTime @default(now())
}

model Follows {
  id                                Int      @id @default(autoincrement())
  followedById                      Int
  followingId                       Int
  addedDate                         DateTime @default(now())
  followedBy   Users @relation("followedBy", fields: [followedById], references: [id])
  following    Users @relation("following", fields: [followingId], references: [id])
}
