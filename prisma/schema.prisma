generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int             @id @default(autoincrement())
  firstName         String
  lastName          String
  password          String
  email             String          @unique
  createdAt         DateTime        @default(now())
  accountImg        String?
  lastLogIn         DateTime?       @db.Timestamp(6)
  isVerified        Boolean         @default(false)
  verificationToken String?
  roleId            Int
  comment_likes     Comment_likes[]
  comments          Comments[]
  post_likes        Post_likes[]
  posts             Posts[]
  Roles             Roles           @relation(fields: [roleId], references: [id])
  followedBy Follows[] @relation("followedBy")
  following  Follows[] @relation("following")
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique(map: "Roles_roleName_key")
  users Users[]
}

model Posts {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  title       String            @db.VarChar(255)
  description String
  authorId    Int
  image       String?
  updated     DateTime?         @db.Timestamp(6)
  archived    Boolean           @default(false)
  comments    Comments[]
  categories  Post_categories[]
  post_likes  Post_likes[]
  author      Users             @relation(fields: [authorId], references: [id])
}

model Categories {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  title       String            @db.VarChar(255)
  description String?
  updated     DateTime?         @db.Timestamp(6)
  posts       Post_categories[]
}

model Post_categories {
  id         Int        @id @default(autoincrement())
  postId     Int
  categoryId Int
  assignedAt DateTime   @default(now())
  category   Categories @relation(fields: [categoryId], references: [id])
  post       Posts      @relation(fields: [postId], references: [id])
}

model Comments {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  content       String
  userId        Int
  postId        Int
  updated       DateTime?       @db.Timestamp(6)
  comment_likes Comment_likes[]
  post          Posts           @relation(fields: [postId], references: [id])
  user          Users           @relation(fields: [userId], references: [id])
}

model Post_likes {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
}

model Comment_likes {
  id         Int      @id @default(autoincrement())
  userId     Int
  commentsId Int
  createdAt  DateTime @default(now())
  comments   Comments @relation(fields: [commentsId], references: [id])
  user       Users    @relation(fields: [userId], references: [id])
}

model Follows {
  id                                Int      @id @default(autoincrement())
  followedById                      Int
  followingId                       Int
  addedDate                         DateTime @default(now())
  followedBy   Users @relation("followedBy", fields: [followedById], references: [id])
  following    Users @relation("following", fields: [followingId], references: [id])
}
